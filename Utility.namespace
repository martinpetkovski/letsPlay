class Vector2D<T>
{
    public T X { get; set; }
    public T Y { get; set; }

    public Vector2D(T X, T Y)
    {
        this.X = X;
        this.Y = Y;
    }
}

class Matrix<T>
{
    private List<T> _matrix { get; set; }
    private Vector2D<Int32> _size { get; set; }

    public T DefaultItem { get; set; }

    public Vector2D<Int32> Size
    {
        get
        {
            return this._size;
        }
        set
        {
            this._size = value;
        }
    }

    private Int32 TransformIndices(Int32 X, Int32 Y)
    {
        return Y * _size.X + X;
    }

    private Int32 TI(Int32 X, Int32 Y)
    {
        return TransformIndices(X, Y); 
    }

    public Matrix(Int32 sizeX, Int32 sizeY, T defaultItem)
    {
        this._size = new Vector2D<Int32>(sizeX, sizeY);
        this._matrix = new List<T>();
        DefaultItem = defaultItem;

        for (Int32 i = 0; i <= sizeX * sizeY; i++)
            _matrix.Insert(i, DefaultItem);
    }

    public T Get(Int32 X, Int32 Y)
    {
        return Get(new Vector2D<Int32>(X, Y));
    }

    public T Get(Vector2D<Int32> index)
    {
        return _matrix.ElementAt(TI(index.X, index.Y));
    }

    public T Get(Int32 index)
    {
        return _matrix.ElementAt(index);
    }

    public Int32 GetActualItemIndex(T item)
    {
        return _matrix.FindIndex(x => EqualityComparer<T>.Default.Equals(x, item));
    }

    public Int32 GetItemRow(T item)
    {
        Int32 index = GetActualItemIndex(item);
        return (Int32)Math.Ceiling((decimal)(index / _size.X));
    }

    public Int32 GetRowActualStartIndex(Int32 row)
    {
        return row * _size.X;
    }

    public void SetElementAt(Int32 X, Int32 Y, T item)
    {
        SetElementAt(new Vector2D<Int32>(X, Y), item);
    }

    public void SetElementAt(Vector2D<Int32> index, T item)
    {
        _matrix.RemoveAt(TI(index.X, index.Y));
        _matrix.Insert(TI(index.X, index.Y), item);
    }

    public void InsertRows(Int32 n)
    {
        InsertRows(n, DefaultItem);
    }

    public void InsertColumns(Int32 n)
    {
        InsertColumns(n, DefaultItem);
    }

    public void InsertRows(Int32 n, T defaultItem)
    {
        for (Int32 i = _size.X * _size.Y; i < (_size.X * _size.Y) + n * _size.X; i++)
        {
            try { _matrix.Insert(i, defaultItem); }
            catch (ArgumentOutOfRangeException) { _matrix.Add(defaultItem); }
        }
        _size.Y += n;
    }

    public void InsertColumns(Int32 n, T defaultItem)
    {
        for (Int32 i = 0; i < _size.Y; i++)
        {
            for (Int32 j = 0; j < n; j++)
            {
                try { _matrix.Insert(_size.X + i*(_size.X+n), defaultItem); }
                catch (ArgumentOutOfRangeException) { _matrix.Add(DefaultItem); }
            }
        }
        _size.X += n;
    }

    private List<Int32> GetRowIndices(Int32 rowIndex)
    {
        List<Int32> t = new List<Int32>();
        for (Int32 i = 0; i < _size.X; i++)
            t.Add(rowIndex * _size.X + i);

        return t;
    }

    private List<T> GetRowItems(Int32 rowIndex)
    {
        List<T> t = new List<T>();
        for (Int32 i = 0; i < _size.X; i++)
            t.Add(_matrix.ElementAt(rowIndex * _size.X + i));

        return t;
    }

    private List<Int32> GetColumnIndices(Int32 columnIndex)
    {
        List<Int32> t = new List<Int32>();
        for (Int32 i = 0; i < _size.Y; i++)
            t.Add(i * _size.X + columnIndex);

        return t;
    }

    private List<T> GetColumnItems(Int32 columnIndex)
    {
        List<T> t = new List<T>();
        for (Int32 i = 0; i < _size.Y; i++)
            t.Add(_matrix.ElementAt(i * _size.X + columnIndex));

        return t;
    }

    private void RemoveIndices(List<Int32> indicesToRemove)
    {
        foreach (Int32 index in indicesToRemove)
            _matrix.RemoveAt(index);
    }

    private void RemoveItems(List<T> itemsToRemove)
    {
        foreach (T item in itemsToRemove)
            _matrix.Remove(_matrix.Find(x=> EqualityComparer<T>.Default.Equals(x, item)));
    }

    public void RemoveRow(Int32 rowIndex)
    {
        RemoveItems(GetRowItems(rowIndex));
        _size.Y--;
    }

    public void RemoveColumn(Int32 columnIndex)
    {
        RemoveItems(GetColumnItems(columnIndex));
        _size.X--;
    }

    public static Int32 SumRowToItem(Matrix<Int32> m, Int32 item)
    {
        Int32 sum = 0;
        for (Int32 i = m.GetRowActualStartIndex(m.GetActualItemIndex(item)); i < m.GetActualItemIndex(item); i++)
            sum += m.Get(i);

        return sum;
    }

    public void Swap(Vector2D<Int32> index1, Vector2D<Int32> index2)
    {
        T item1 = Get(index1);
        T item2 = Get(index2);

        SetElementAt(index2, item1);
        SetElementAt(index1, item2);
    }

    public void DEBUG_DumpToOutput()
    {
        Debug.WriteLine(this.GetHashCode() + "\n" + this.ToString());
    }

    public override string ToString()
    {
        string converted = "\n";
        for (Int32 j = 0; j < _size.Y; j++)
        {
            for (Int32 i = 0; i < _size.X; i++)
            {
                converted += Get(i, j) + " ";
            }
            converted += '\n';
        }

        return converted;
    }
}
